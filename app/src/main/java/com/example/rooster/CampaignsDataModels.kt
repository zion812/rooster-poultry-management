package com.example.rooster

import androidx.compose.ui.graphics.Color
import com.parse.ParseObject
import java.util.*

// Campaign Data Models for Awareness and Education

data class Campaign(
    val id: String,
    val title: String,
    val titleInTelugu: String,
    val description: String,
    val descriptionInTelugu: String,
    val category: CampaignCategory,
    val priority: CampaignPriority,
    val status: CampaignStatus,
    val targetAudience: List<String>, // "farmers", "general", "high-level", "all"
    val regions: List<String>, // Telangana, Andhra Pradesh, etc.
    val startDate: Date,
    val endDate: Date,
    val imageUrl: String? = null,
    val videoUrl: String? = null,
    val actionButtonText: String? = null,
    val actionButtonTextTelugu: String? = null,
    val actionUrl: String? = null,
    val readMoreUrl: String? = null,
    val tags: List<String> = emptyList(),
    val engagement: CampaignEngagement = CampaignEngagement(),
    val isSponsored: Boolean = false,
    val sponsorName: String? = null,
    val createdDate: Date = Date(),
    val lastUpdated: Date = Date(),
    val createdBy: String,
    val isActive: Boolean = true,
    val maxImpressions: Int? = null,
    val currentImpressions: Int = 0,
)

enum class CampaignCategory(
    val displayName: String,
    val displayNameTelugu: String,
    val color: Color,
    val icon: String,
) {
    HEALTH_AWARENESS(
        "Health Awareness",
        "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞Ö‡∞µ‡∞ó‡∞æ‡∞π‡∞®",
        Color(0xFF4CAF50),
        "üè•",
    ),
    BREED_EDUCATION(
        "Breed Education",
        "‡∞ú‡∞æ‡∞§‡±Å‡∞≤ ‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø",
        Color(0xFF2196F3),
        "üêì",
    ),
    MARKET_TRENDS(
        "Market Trends",
        "‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞ü‡±ç‡∞∞‡±Ü‡∞Ç‡∞°‡±ç‡∞≤‡±Å",
        Color(0xFFFF9800),
        "üìà",
    ),
    CULTURAL_PRESERVATION(
        "Cultural Preservation",
        "‡∞∏‡∞æ‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞ï ‡∞∏‡∞Ç‡∞∞‡∞ï‡±ç‡∞∑‡∞£",
        Color(0xFF9C27B0),
        "üé≠",
    ),
    GOVERNMENT_SCHEMES(
        "Government Schemes",
        "‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞™‡∞•‡∞ï‡∞æ‡∞≤‡±Å",
        Color(0xFF607D8B),
        "üèõÔ∏è",
    ),
    TECHNOLOGY_ADOPTION(
        "Technology Adoption",
        "‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï ‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞Ç",
        Color(0xFF00BCD4),
        "üì±",
    ),
    ENVIRONMENTAL_CARE(
        "Environmental Care",
        "‡∞™‡∞∞‡±ç‡∞Ø‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡∞Ç‡∞∞‡∞ï‡±ç‡∞∑‡∞£",
        Color(0xFF8BC34A),
        "üå±",
    ),
    COMMUNITY_BUILDING(
        "Community Building",
        "‡∞ï‡∞Æ‡±ç‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±Ä ‡∞®‡∞ø‡∞∞‡±ç‡∞Æ‡∞æ‡∞£‡∞Ç",
        Color(0xFFE91E63),
        "üë•",
    ),
}

enum class CampaignPriority(val displayName: String, val color: Color) {
    LOW("Low Priority", Color(0xFF4CAF50)),
    MEDIUM("Medium Priority", Color(0xFFFF9800)),
    HIGH("High Priority", Color(0xFFFF5722)),
    URGENT("Urgent", Color(0xFFD32F2F)),
}

enum class CampaignStatus(val displayName: String, val color: Color) {
    DRAFT("Draft", Color(0xFF757575)),
    SCHEDULED("Scheduled", Color(0xFF2196F3)),
    ACTIVE("Active", Color(0xFF4CAF50)),
    PAUSED("Paused", Color(0xFFFF9800)),
    COMPLETED("Completed", Color(0xFF9C27B0)),
    CANCELLED("Cancelled", Color(0xFFD32F2F)),
}

data class CampaignEngagement(
    val views: Int = 0,
    val clicks: Int = 0,
    val shares: Int = 0,
    val likes: Int = 0,
    val comments: Int = 0,
    val actionButtonClicks: Int = 0,
    val readMoreClicks: Int = 0,
    val conversionRate: Double = 0.0,
    val engagementRate: Double = 0.0,
    val reachCount: Int = 0,
    val uniqueUsers: Set<String> = emptySet(),
)

data class CampaignInteraction(
    val userId: String,
    val campaignId: String,
    val interactionType: InteractionType,
    val timestamp: Date = Date(),
    val metadata: Map<String, String> = emptyMap(),
)

enum class InteractionType {
    VIEW,
    CLICK,
    SHARE,
    LIKE,
    COMMENT,
    ACTION_BUTTON_CLICK,
    READ_MORE_CLICK,
    DISMISS,
    REPORT,
    SAVE,
}

// Sample campaigns for different categories
fun getSampleCampaigns(): List<Campaign> =
    listOf(
        Campaign(
            id = "health_001",
            title = "Prevent Newcastle Disease",
            titleInTelugu = "‡∞®‡±ç‡∞Ø‡±Ç‡∞ï‡∞æ‡∞ú‡∞ø‡∞≤‡±ç ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø‡∞®‡∞ø ‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
            description = "Learn how to protect your flock from Newcastle Disease with proper vaccination schedules and hygiene practices.",
            descriptionInTelugu = "‡∞∏‡∞∞‡±à‡∞® ‡∞ü‡±Ä‡∞ï‡∞æ ‡∞µ‡±á‡∞Ø‡∞ø‡∞Ç‡∞™‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡∞∞‡∞ø‡∞∂‡±Å‡∞≠‡±ç‡∞∞‡∞§ ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡±Å‡∞≤‡∞§‡±ã ‡∞®‡±ç‡∞Ø‡±Ç‡∞ï‡∞æ‡∞ú‡∞ø‡∞≤‡±ç ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞Æ‡±Ä ‡∞™‡∞ï‡±ç‡∞∑‡±Å‡∞≤ ‡∞Æ‡∞Ç‡∞¶‡∞®‡±Å ‡∞é‡∞≤‡∞æ ‡∞∞‡∞ï‡±ç‡∞∑‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞µ‡∞æ‡∞≤‡±ã ‡∞§‡±Ü‡∞≤‡±Å‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.",
            category = CampaignCategory.HEALTH_AWARENESS,
            priority = CampaignPriority.HIGH,
            status = CampaignStatus.ACTIVE,
            targetAudience = listOf("farmers", "general"),
            regions = listOf("Telangana", "Andhra Pradesh", "Karnataka", "Tamil Nadu"),
            startDate = Date(),
            endDate = Date(System.currentTimeMillis() + 30L * 24 * 60 * 60 * 1000), // 30 days
            actionButtonText = "Learn Vaccination Schedule",
            actionButtonTextTelugu = "‡∞ü‡±Ä‡∞ï‡∞æ ‡∞µ‡±á‡∞Ø‡∞ø‡∞Ç‡∞™‡±Å ‡∞∑‡±Ü‡∞°‡±ç‡∞Ø‡±Ç‡∞≤‡±ç ‡∞§‡±Ü‡∞≤‡±Å‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
            tags = listOf("health", "vaccination", "prevention", "rural"),
            createdBy = "health_expert_001",
        ),
        Campaign(
            id = "breed_001",
            title = "Kadaknath: The Black Chicken Wonder",
            titleInTelugu = "‡∞ï‡∞°‡∞ï‡±ç‡∞®‡∞æ‡∞§‡±ç: ‡∞®‡∞≤‡±ç‡∞≤ ‡∞ï‡±ã‡∞°‡∞ø ‡∞Ö‡∞¶‡±ç‡∞≠‡±Å‡∞§‡∞Ç",
            description = "Discover the nutritional benefits and market value of the famous Kadaknath breed. High protein, medicinal properties, and premium pricing.",
            descriptionInTelugu = "‡∞™‡±ç‡∞∞‡∞∏‡∞ø‡∞¶‡±ç‡∞ß ‡∞ï‡∞°‡∞ï‡±ç‡∞®‡∞æ‡∞§‡±ç ‡∞ú‡∞æ‡∞§‡∞ø ‡∞Ø‡±ä‡∞ï‡±ç‡∞ï ‡∞™‡±ã‡∞∑‡∞ï ‡∞™‡±ç‡∞∞‡∞Ø‡±ã‡∞ú‡∞®‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞µ‡∞ø‡∞≤‡±Å‡∞µ‡∞®‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞Ç‡∞°‡∞ø. ‡∞Ö‡∞ß‡∞ø‡∞ï ‡∞™‡±ç‡∞∞‡±ã‡∞ü‡±Ä‡∞®‡±ç, ‡∞î‡∞∑‡∞ß ‡∞ó‡±Å‡∞£‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡±ç‡∞∞‡±Ä‡∞Æ‡∞ø‡∞Ø‡∞Ç ‡∞ß‡∞∞.",
            category = CampaignCategory.BREED_EDUCATION,
            priority = CampaignPriority.MEDIUM,
            status = CampaignStatus.ACTIVE,
            targetAudience = listOf("all"),
            regions = listOf("all"),
            startDate = Date(),
            endDate = Date(System.currentTimeMillis() + 60L * 24 * 60 * 60 * 1000), // 60 days
            actionButtonText = "View Breeding Guide",
            actionButtonTextTelugu = "‡∞™‡±Ü‡∞Ç‡∞™‡∞ï‡∞Ç ‡∞ó‡±à‡∞°‡±ç ‡∞ö‡±Ç‡∞°‡∞Ç‡∞°‡∞ø",
            tags = listOf("kadaknath", "breed", "nutrition", "premium"),
            createdBy = "breed_expert_001",
        ),
        Campaign(
            id = "market_001",
            title = "Festival Season Price Surge",
            titleInTelugu = "‡∞™‡∞Ç‡∞°‡±Å‡∞ó ‡∞ï‡∞æ‡∞≤‡∞Ç‡∞≤‡±ã ‡∞ß‡∞∞‡∞≤ ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞¶‡∞≤",
            description = "Prepare for the upcoming festival season! Cockfight competitions and traditional celebrations are driving up demand and prices.",
            descriptionInTelugu = "‡∞∞‡∞æ‡∞¨‡±ã‡∞Ø‡±á ‡∞™‡∞Ç‡∞°‡±Å‡∞ó ‡∞∏‡±Ä‡∞ú‡∞®‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞∏‡∞ø‡∞¶‡±ç‡∞ß‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞°‡∞Ç‡∞°‡∞ø! ‡∞ï‡±ã‡∞°‡∞ø‡∞™‡±ã‡∞ü‡±ç‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞æ‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø ‡∞µ‡±á‡∞°‡±Å‡∞ï‡∞≤‡±Å ‡∞°‡∞ø‡∞Æ‡∞æ‡∞Ç‡∞°‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ß‡∞∞‡∞≤‡∞®‡±Å ‡∞™‡±Ü‡∞Ç‡∞ö‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø.",
            category = CampaignCategory.MARKET_TRENDS,
            priority = CampaignPriority.HIGH,
            status = CampaignStatus.ACTIVE,
            targetAudience = listOf("farmers", "general"),
            regions = listOf("Telangana", "Andhra Pradesh"),
            startDate = Date(),
            endDate = Date(System.currentTimeMillis() + 15L * 24 * 60 * 60 * 1000), // 15 days
            actionButtonText = "Check Current Prices",
            actionButtonTextTelugu = "‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞ß‡∞∞‡∞≤‡±Å ‡∞ö‡±Ç‡∞°‡∞Ç‡∞°‡∞ø",
            tags = listOf("festival", "sankranti", "prices", "demand"),
            createdBy = "market_analyst_001",
        ),
        Campaign(
            id = "govt_001",
            title = "Poultry Development Scheme 2025",
            titleInTelugu = "‡∞ï‡±ã‡∞°‡∞ø‡∞™‡±Ü‡∞Ç‡∞™‡∞ï‡∞Ç ‡∞Ö‡∞≠‡∞ø‡∞µ‡±É‡∞¶‡±ç‡∞ß‡∞ø ‡∞™‡∞•‡∞ï‡∞Ç 2025",
            description = "Government subsidy available for poultry farmers! Get up to ‚Çπ50,000 assistance for setting up modern poultry units.",
            descriptionInTelugu = "‡∞ï‡±ã‡∞°‡∞ø‡∞™‡±Ü‡∞Ç‡∞™‡∞ï‡∞Ç ‡∞ö‡±á‡∞∏‡±á ‡∞∞‡±à‡∞§‡±Å‡∞≤‡∞ï‡±Å ‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞∏‡∞¨‡±ç‡∞∏‡∞ø‡∞°‡±Ä ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã! ‡∞Ü‡∞ß‡±Å‡∞®‡∞ø‡∞ï ‡∞ï‡±ã‡∞°‡∞ø‡∞™‡±Ü‡∞Ç‡∞™‡∞ï‡∞Ç ‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±ç‡∞≤‡±Å ‡∞è‡∞∞‡±ç‡∞™‡∞æ‡∞ü‡±Å ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‚Çπ50,000 ‡∞µ‡∞∞‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞™‡±ä‡∞Ç‡∞¶‡∞Ç‡∞°‡∞ø.",
            category = CampaignCategory.GOVERNMENT_SCHEMES,
            priority = CampaignPriority.HIGH,
            status = CampaignStatus.ACTIVE,
            targetAudience = listOf("farmers"),
            regions = listOf("Telangana", "Andhra Pradesh", "Karnataka"),
            startDate = Date(),
            endDate = Date(System.currentTimeMillis() + 90L * 24 * 60 * 60 * 1000), // 90 days
            actionButtonText = "Apply Now",
            actionButtonTextTelugu = "‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±á ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
            tags = listOf("government", "subsidy", "assistance", "modern"),
            createdBy = "govt_official_001",
        ),
        Campaign(
            id = "cultural_001",
            title = "Preserve Traditional Breeds",
            titleInTelugu = "‡∞∏‡∞æ‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø ‡∞ú‡∞æ‡∞§‡±Å‡∞≤‡∞®‡±Å ‡∞ï‡∞æ‡∞™‡∞æ‡∞°‡∞Ç‡∞°‡∞ø",
            description = "Help preserve our heritage breeds like Asil, Chittagong, and local varieties. These breeds are part of our cultural identity.",
            descriptionInTelugu = "‡∞Ö‡∞∏‡∞ø‡∞≤‡±ç, ‡∞ö‡∞ø‡∞ü‡±ç‡∞ü‡∞ó‡∞æ‡∞Ç‡∞ó‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å ‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞Æ‡∞® ‡∞µ‡∞æ‡∞∞‡∞∏‡∞§‡±ç‡∞µ ‡∞ú‡∞æ‡∞§‡±Å‡∞≤‡∞®‡±Å ‡∞ï‡∞æ‡∞™‡∞æ‡∞°‡∞ü‡∞Ç‡∞≤‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞™‡∞°‡∞Ç‡∞°‡∞ø. ‡∞à ‡∞ú‡∞æ‡∞§‡±Å‡∞≤‡±Å ‡∞Æ‡∞® ‡∞∏‡∞æ‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞ï ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å‡∞≤‡±ã ‡∞≠‡∞æ‡∞ó‡∞Ç.",
            category = CampaignCategory.CULTURAL_PRESERVATION,
            priority = CampaignPriority.MEDIUM,
            status = CampaignStatus.ACTIVE,
            targetAudience = listOf("all"),
            regions = listOf("all"),
            startDate = Date(),
            endDate = Date(System.currentTimeMillis() + 180L * 24 * 60 * 60 * 1000), // 180 days
            actionButtonText = "Join Preservation Program",
            actionButtonTextTelugu = "‡∞∏‡∞Ç‡∞∞‡∞ï‡±ç‡∞∑‡∞£ ‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞ï‡±ç‡∞∞‡∞Æ‡∞Ç‡∞≤‡±ã ‡∞ö‡±á‡∞∞‡∞Ç‡∞°‡∞ø",
            tags = listOf("traditional", "heritage", "asil", "preservation"),
            createdBy = "cultural_expert_001",
        ),
    )

// Parse conversion functions
fun Campaign.toParseObject(): ParseObject {
    val parseObject = ParseObject("Campaign")
    parseObject.put("campaignId", id)
    parseObject.put("title", title)
    parseObject.put("titleInTelugu", titleInTelugu)
    parseObject.put("description", description)
    parseObject.put("descriptionInTelugu", descriptionInTelugu)
    parseObject.put("category", category.name)
    parseObject.put("priority", priority.name)
    parseObject.put("status", status.name)
    parseObject.put("targetAudience", targetAudience)
    parseObject.put("regions", regions)
    parseObject.put("startDate", startDate)
    parseObject.put("endDate", endDate)
    imageUrl?.let { parseObject.put("imageUrl", it) }
    videoUrl?.let { parseObject.put("videoUrl", it) }
    actionButtonText?.let { parseObject.put("actionButtonText", it) }
    actionButtonTextTelugu?.let { parseObject.put("actionButtonTextTelugu", it) }
    actionUrl?.let { parseObject.put("actionUrl", it) }
    readMoreUrl?.let { parseObject.put("readMoreUrl", it) }
    parseObject.put("tags", tags)
    parseObject.put("isSponsored", isSponsored)
    sponsorName?.let { parseObject.put("sponsorName", it) }
    parseObject.put("createdDate", createdDate)
    parseObject.put("lastUpdated", lastUpdated)
    parseObject.put("createdBy", createdBy)
    parseObject.put("isActive", isActive)
    maxImpressions?.let { parseObject.put("maxImpressions", it) }
    parseObject.put("currentImpressions", currentImpressions)

    // Engagement metrics
    parseObject.put("views", engagement.views)
    parseObject.put("clicks", engagement.clicks)
    parseObject.put("shares", engagement.shares)
    parseObject.put("likes", engagement.likes)
    parseObject.put("comments", engagement.comments)
    parseObject.put("actionButtonClicks", engagement.actionButtonClicks)
    parseObject.put("readMoreClicks", engagement.readMoreClicks)
    parseObject.put("conversionRate", engagement.conversionRate)
    parseObject.put("engagementRate", engagement.engagementRate)
    parseObject.put("reachCount", engagement.reachCount)

    return parseObject
}

fun ParseObject.toCampaign(): Campaign {
    return Campaign(
        id = getString("campaignId") ?: objectId,
        title = getString("title") ?: "",
        titleInTelugu = getString("titleInTelugu") ?: "",
        description = getString("description") ?: "",
        descriptionInTelugu = getString("descriptionInTelugu") ?: "",
        category =
            try {
                CampaignCategory.valueOf(getString("category") ?: "COMMUNITY_BUILDING")
            } catch (e: Exception) {
                CampaignCategory.COMMUNITY_BUILDING
            },
        priority =
            try {
                CampaignPriority.valueOf(getString("priority") ?: "MEDIUM")
            } catch (e: Exception) {
                CampaignPriority.MEDIUM
            },
        status =
            try {
                CampaignStatus.valueOf(getString("status") ?: "ACTIVE")
            } catch (e: Exception) {
                CampaignStatus.ACTIVE
            },
        targetAudience =
            try {
                val list = getList<String>("targetAudience")
                list?.filterNotNull() ?: emptyList()
            } catch (e: Exception) {
                emptyList()
            },
        regions =
            try {
                val list = getList<String>("regions")
                list?.filterNotNull() ?: emptyList()
            } catch (e: Exception) {
                emptyList()
            },
        startDate = getDate("startDate") ?: Date(),
        endDate = getDate("endDate") ?: Date(),
        imageUrl = getString("imageUrl"),
        videoUrl = getString("videoUrl"),
        actionButtonText = getString("actionButtonText"),
        actionButtonTextTelugu = getString("actionButtonTextTelugu"),
        actionUrl = getString("actionUrl"),
        readMoreUrl = getString("readMoreUrl"),
        tags =
            try {
                val list = getList<String>("tags")
                list?.filterNotNull() ?: emptyList()
            } catch (e: Exception) {
                emptyList()
            },
        engagement =
            CampaignEngagement(
                views = getInt("views"),
                clicks = getInt("clicks"),
                shares = getInt("shares"),
                likes = getInt("likes"),
                comments = getInt("comments"),
                actionButtonClicks = getInt("actionButtonClicks"),
                readMoreClicks = getInt("readMoreClicks"),
                conversionRate = getDouble("conversionRate"),
                engagementRate = getDouble("engagementRate"),
                reachCount = getInt("reachCount"),
            ),
        isSponsored = getBoolean("isSponsored"),
        sponsorName = getString("sponsorName"),
        createdDate = getDate("createdDate") ?: createdAt,
        lastUpdated = getDate("lastUpdated") ?: updatedAt,
        createdBy = getString("createdBy") ?: "",
        isActive = getBoolean("isActive"),
        maxImpressions = if (has("maxImpressions")) getInt("maxImpressions") else null,
        currentImpressions = getInt("currentImpressions"),
    )
}
