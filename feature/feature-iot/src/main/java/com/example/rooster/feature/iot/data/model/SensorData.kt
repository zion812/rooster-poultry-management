package com.example.rooster.feature.iot.data.model

import androidx.room.PrimaryKey
import kotlinx.serialization.Serializable

/**
 * Represents information about an IoT device.
 *
 * @property deviceId Unique identifier for the device.
 * @property name User-friendly name of the device.
 * @property type Type of the device (e.g., "TemperatureSensor", "FeederControl").
 * @property location Physical location of the device (e.g., "Shed 1", "Main Silo").
 * @property status Current operational status of the device (e.g., "online", "offline", "error").
 * @property lastSeen Timestamp of when the device was last seen or reported data.
 * @property batteryLevel Optional battery level of the device, in percentage.
 * @property customProperties A map for any additional device-specific information.
 */
@Serializable
data class DeviceInfo(
    val deviceId: String = "",
    val name: String = "",
    val type: String = "",
    val location: String = "",
    val status: String = "offline",
    val lastSeen: Long = 0L,
    val batteryLevel: Int? = null,
    val customProperties: Map<String, String> = emptyMap()
)

/**
 * Base interface for all sensor readings.
 *
 * @property readingId Unique identifier for this specific reading.
 * @property deviceId Identifier of the device that produced this reading.
 * @property timestamp Timestamp when the reading was taken.
 * @property unit Unit of measurement for the reading value.
 * @property synced Flag indicating if this data is considered reliably synced (not related to `needsSync` for uploads).
 */
interface BaseReading {
    val readingId: String
    val deviceId: String
    val timestamp: Long
    val unit: String
    val synced: Boolean
}

/**
 * Represents a temperature reading from a sensor.
 * Inherits from [BaseReading].
 *
 * @property temperature The temperature value.
 */
@Serializable
data class TemperatureReading(
    @PrimaryKey override val readingId: String = java.util.UUID.randomUUID().toString(),
    override val deviceId: String = "",
    override val timestamp: Long = System.currentTimeMillis(),
    val temperature: Double = 0.0,
    override val unit: String = "Â°C",
    override val synced: Boolean = false
) : BaseReading

/**
 * Represents a humidity reading from a sensor.
 * Inherits from [BaseReading].
 *
 * @property humidity The humidity value in percentage.
 */
@Serializable
data class HumidityReading(
    @PrimaryKey override val readingId: String = java.util.UUID.randomUUID().toString(),
    override val deviceId: String = "",
    override val timestamp: Long = System.currentTimeMillis(),
    val humidity: Double = 0.0,
    override val unit: String = "%",
    override val synced: Boolean = false
) : BaseReading

/**
 * Represents a feed level reading from a sensor.
 * Inherits from [BaseReading].
 *
 * @property levelPercentage The feed level in percentage.
 */
@Serializable
data class FeedLevelReading(
    @PrimaryKey override val readingId: String = java.util.UUID.randomUUID().toString(),
    override val deviceId: String = "",
    override val timestamp: Long = System.currentTimeMillis(),
    val levelPercentage: Double = 0.0,
    override val unit: String = "%",
    override val synced: Boolean = false
) : BaseReading

/**
 * Represents a water consumption reading.
 * Inherits from [BaseReading].
 *
 * @property volumeConsumed The volume of water consumed, e.g., in Liters.
 */
@Serializable
data class WaterConsumptionReading(
    @PrimaryKey override val readingId: String = java.util.UUID.randomUUID().toString(),
    override val deviceId: String = "",
    override val timestamp: Long = System.currentTimeMillis(),
    val volumeConsumed: Double = 0.0,
    override val unit: String = "L",
    override val synced: Boolean = false
) : BaseReading

/**
 * Represents a light level reading from a sensor.
 * Inherits from [BaseReading].
 *
 * @property lux The light level in lux.
 */
@Serializable
data class LightLevelReading(
    @PrimaryKey override val readingId: String = java.util.UUID.randomUUID().toString(),
    override val deviceId: String = "",
    override val timestamp: Long = System.currentTimeMillis(),
    val lux: Double = 0.0,
    override val unit: String = "lux",
    override val synced: Boolean = false
) : BaseReading

/**
 * Represents an alert generated by the system or a device.
 *
 * @property alertId Unique identifier for the alert.
 * @property deviceId Optional ID of the device related to this alert.
 * @property flockId Optional ID of the flock related to this alert.
 * @property alertType Type of the alert (e.g., "TEMPERATURE_HIGH", "FEED_LOW").
 * @property severity Severity of the alert (e.g., "INFO", "WARNING", "CRITICAL").
 * @property message Descriptive message for the alert.
 * @property timestamp Timestamp when the alert was generated.
 * @property acknowledged Flag indicating if the alert has been acknowledged by a user.
 */
@Serializable
data class AlertInfo(
    @PrimaryKey val alertId: String = java.util.UUID.randomUUID().toString(),
    val deviceId: String? = null,
    val flockId: String? = null,
    val alertType: String,
    val severity: String,
    val message: String,
    val timestamp: Long = System.currentTimeMillis(),
    val acknowledged: Boolean = false
)

/**
 * Represents configuration settings for a device that can be set from the app.
 *
 * @property deviceId Unique identifier for the device.
 * @property displayName User-friendly name for the device.
 * @property location Physical location of the device.
 * @property reportingIntervalMs How often the device should report data, in milliseconds.
 * @property customSettings A map for any additional custom settings for the device.
 * @property needsSync Flag indicating if local changes to this config need to be pushed to the remote.
 */
@Serializable
data class DeviceConfig(
    val deviceId: String,
    var displayName: String,
    var location: String,
    var reportingIntervalMs: Long? = null,
    var customSettings: Map<String, String> = emptyMap(),
    var needsSync: Boolean = false
)

/**
 * Represents the state for historical data queries in the UI.
 *
 * @property temperatureReadings List of historical temperature readings.
 * @property humidityReadings List of historical humidity readings.
 * @property feedLevelReadings List of historical feed level readings.
 * @property waterConsumptionReadings List of historical water consumption readings.
 * @property lightLevelReadings List of historical light level readings.
 * @property isLoading Flag indicating if historical data is currently being loaded.
 * @property errorMessage Optional error message if data fetching failed.
 * @property lastFetchedDeviceId Device ID for which data was last fetched.
 * @property lastFetchedStartTime Start timestamp of the last fetched range.
 * @property lastFetchedEndTime End timestamp of the last fetched range.
 */
@Serializable
data class HistoricalDataState(
    val temperatureReadings: List<TemperatureReading> = emptyList(),
    val humidityReadings: List<HumidityReading> = emptyList(),
    val feedLevelReadings: List<FeedLevelReading> = emptyList(),
    val waterConsumptionReadings: List<WaterConsumptionReading> = emptyList(),
    val lightLevelReadings: List<LightLevelReading> = emptyList(),
    val isLoading: Boolean = false,
    val errorMessage: String? = null,
    val lastFetchedDeviceId: String? = null,
    val lastFetchedStartTime: Long? = null,
    val lastFetchedEndTime: Long? = null
)

// --- Advanced Analytics Models ---

/**
 * Represents a production forecast.
 *
 * @property forecastId Unique ID for the forecast.
 * @property farmId Optional ID of the farm this forecast pertains to.
 * @property flockId Optional ID of the flock this forecast pertains to.
 * @property forecastDate Timestamp for which the forecast is made.
 * @property predictedEggCount Predicted number of eggs.
 * @property predictedWeightGainKg Predicted weight gain in kilograms (for broilers).
 * @property confidenceScore Confidence score of the prediction (e.g., 0.0 to 1.0).
 * @property notes Additional notes about the forecast.
 */
@Serializable
data class ProductionForecast(
    val forecastId: String = java.util.UUID.randomUUID().toString(),
    val farmId: String? = null,
    val flockId: String? = null,
    val forecastDate: Long = System.currentTimeMillis(),
    val predictedEggCount: Int? = null,
    val predictedWeightGainKg: Double? = null,
    val confidenceScore: Double? = null,
    val notes: String? = null
)

/**
 * Represents a performance prediction for a farm or flock.
 *
 * @property predictionId Unique ID for the prediction.
 * @property farmId Optional ID of the farm.
 * @property flockId Optional ID of the flock.
 * @property predictionDate Timestamp when the prediction was made.
 * @property feedConversionRatio Predicted Feed Conversion Ratio.
 * @property mortalityRatePercentage Predicted mortality rate in percentage.
 * @property overallScore Overall performance score (e.g., "Good", "Average", "Needs Attention").
 * @property factors List of key factors influencing this prediction.
 */
@Serializable
data class PerformancePrediction(
    val predictionId: String = java.util.UUID.randomUUID().toString(),
    val farmId: String? = null,
    val flockId: String? = null,
    val predictionDate: Long = System.currentTimeMillis(),
    val feedConversionRatio: Double? = null,
    val mortalityRatePercentage: Double? = null,
    val overallScore: String? = null,
    val factors: List<String> = emptyList()
)

/**
 * Represents a feed optimization recommendation.
 *
 * @property recommendationId Unique ID for the recommendation.
 * @property farmId Optional ID of the farm.
 * @property flockId Optional ID of the flock.
 * @property recommendationDate Timestamp when the recommendation was generated.
 * @property currentFeedName Name of the current feed being used.
 * @property recommendedFeedName Name of the recommended feed.
 * @property reason Reason for the recommendation.
 * @property estimatedSavingsPercentage Estimated cost savings in percentage.
 * @property estimatedPerformanceGain Estimated performance gain (e.g., "+5% egg production").
 */
@Serializable
data class FeedOptimizationRecommendation(
    val recommendationId: String = java.util.UUID.randomUUID().toString(),
    val farmId: String? = null,
    val flockId: String? = null,
    val recommendationDate: Long = System.currentTimeMillis(),
    val currentFeedName: String?,
    val recommendedFeedName: String?,
    val reason: String?,
    val estimatedSavingsPercentage: Double?,
    val estimatedPerformanceGain: String?
)

/**
 * Represents an analyzed health trend for a farm or flock.
 *
 * @property trendId Unique ID for the trend analysis.
 * @property farmId Optional ID of the farm.
 * @property flockId Optional ID of the flock.
 * @property trendType Type of health trend analyzed (e.g., "Mortality", "Weight Gain").
 * @property periodStartDate Start timestamp of the analysis period.
 * @property periodEndDate End timestamp of the analysis period.
 * @property trendValue Numerical value of the trend (e.g., average mortality rate).
 * @property trendDirection Direction of the trend ("Increasing", "Decreasing", "Stable").
 * @property interpretation A textual interpretation of the trend.
 */
@Serializable
data class HealthTrend(
    val trendId: String = java.util.UUID.randomUUID().toString(),
    val farmId: String? = null,
    val flockId: String? = null,
    val trendType: String,
    val periodStartDate: Long,
    val periodEndDate: Long,
    val trendValue: Double,
    val trendDirection: String,
    val interpretation: String?
)

/**
 * UI state for displaying advanced analytics data.
 *
 * @property productionForecasts List of production forecasts.
 * @property performancePredictions List of performance predictions.
 * @property feedRecommendations List of feed optimization recommendations.
 * @property healthTrends List of analyzed health trends.
 * @property isLoading Flag indicating if analytics data is currently loading.
 * @property errorMessage Optional error message if data fetching failed.
 */
data class AdvancedAnalyticsState(
    val productionForecasts: List<ProductionForecast> = emptyList(),
    val performancePredictions: List<PerformancePrediction> = emptyList(),
    val feedRecommendations: List<FeedOptimizationRecommendation> = emptyList(),
    val healthTrends: List<HealthTrend> = emptyList(),
    val isLoading: Boolean = false,
    val errorMessage: String? = null
)

// --- Smart Automation Models ---

/**
 * Represents an automated feeding schedule.
 *
 * @property scheduleId Unique ID for the schedule (e.g., "default_feeding_schedule").
 * @property farmId Optional ID of the farm this schedule applies to.
 * @property flockId Optional ID of the flock this schedule applies to.
 * @property isEnabled Flag indicating if the schedule is active.
 * @property times List of feeding times in HH:mm format.
 * @property amountPerFeedingKg Amount of feed per feeding, in kilograms.
 * @property lastUpdated Timestamp of the last modification.
 * @property needsSync Flag indicating if local changes need to be pushed to remote.
 */
@Serializable
data class FeedingSchedule(
    val scheduleId: String = "default_feeding_schedule",
    var farmId: String? = null,
    var flockId: String? = null,
    var isEnabled: Boolean = true,
    val times: List<String> = listOf("08:00", "16:00"),
    val amountPerFeedingKg: Double = 5.0,
    var lastUpdated: Long = System.currentTimeMillis(),
    var needsSync: Boolean = false
)

/**
 * Represents automated climate control settings.
 *
 * @property settingsId Unique ID for the climate settings (e.g., "default_climate_settings").
 * @property farmId Optional ID of the farm.
 * @property shedId Optional ID of the shed these settings apply to.
 * @property targetTemperature Target temperature in Celsius.
 * @property targetHumidityPercentage Target humidity in percentage.
 * @property fanControlMode Mode for fan control (e.g., "auto", "manual_on", "manual_off").
 * @property lightingSchedule Schedule for lighting (e.g., mapOf("on" to "06:00", "off" to "20:00")).
 * @property lastUpdated Timestamp of the last modification.
 * @property needsSync Flag indicating if local changes need to be pushed to remote.
 */
@Serializable
data class ClimateSettings(
    val settingsId: String = "default_climate_settings",
    var farmId: String? = null,
    var shedId: String? = null,
    var targetTemperature: Double = 22.0,
    var targetHumidityPercentage: Double = 50.0,
    var fanControlMode: String = "auto",
    var lightingSchedule: Map<String, String> = mapOf("on" to "06:00", "off" to "20:00"),
    var lastUpdated: Long = System.currentTimeMillis(),
    var needsSync: Boolean = false
)

/**
 * Represents a maintenance reminder for equipment or devices.
 *
 * @property reminderId Unique ID for the reminder.
 * @property farmId Optional ID of the farm.
 * @property deviceId Optional ID of the specific device or equipment.
 * @property equipmentType Type of equipment (e.g., "Feeder", "Ventilation System").
 * @property description Description of the maintenance task.
 * @property dueDate Timestamp when the maintenance is due.
 * @property isCompleted Flag indicating if the task has been completed.
 * @property notes Additional notes about the maintenance.
 * @property lastUpdated Timestamp of the last modification.
 * @property needsSync Flag indicating if local changes (e.g., completion status) need to be pushed.
 */
@Serializable
data class MaintenanceReminder(
    val reminderId: String = java.util.UUID.randomUUID().toString(),
    var farmId: String? = null,
    var deviceId: String? = null,
    var equipmentType: String,
    var description: String,
    var dueDate: Long,
    var isCompleted: Boolean = false,
    var notes: String? = null,
    var lastUpdated: Long = System.currentTimeMillis(),
    var needsSync: Boolean = false
)

/**
 * UI state for displaying smart automation controls.
 *
 * @property feedingSchedules List of feeding schedules.
 * @property climateSettings List of climate control settings.
 * @property maintenanceReminders List of maintenance reminders.
 * @property isLoading Flag indicating if automation settings are currently loading.
 * @property errorMessage Optional error message if data fetching failed.
 */
data class SmartAutomationUiState(
    val feedingSchedules: List<FeedingSchedule> = emptyList(),
    val climateSettings: List<ClimateSettings> = emptyList(),
    val maintenanceReminders: List<MaintenanceReminder> = emptyList(),
    val isLoading: Boolean = false,
    val errorMessage: String? = null
)
