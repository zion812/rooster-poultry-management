version: '3.8'

services:
  rooster-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rooster-price-prediction-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Firebase Configuration
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/serviceAccountKey.json
      # Parse Server Configuration
      - PARSE_APP_ID=${PARSE_APP_ID}
      - PARSE_REST_API_KEY=${PARSE_REST_API_KEY}
      - PARSE_SERVER_URL=${PARSE_SERVER_URL:-https://parseapi.back4app.com}
      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      # Regional Configuration
      - DEFAULT_REGIONAL_FACTOR=${DEFAULT_REGIONAL_FACTOR:-1.05}
      - PRICE_HISTORY_DAYS=${PRICE_HISTORY_DAYS:-30}
    volumes:
      # Mount Firebase service account key
      # - ${GOOGLE_APPLICATION_CREDENTIALS}:/app/serviceAccountKey.json:ro
      # Mount logs directory (optional)
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rooster-network

  # Optional: Redis for caching (future enhancement)
  # redis:
  #   image: redis:7-alpine
  #   container_name: rooster-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   networks:
  #     - rooster-network

  # Optional: Nginx reverse proxy (for production)
  # nginx:
  #   image: nginx:alpine
  #   container_name: rooster-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - rooster-api
  #   restart: unless-stopped
  #   networks:
  #     - rooster-network

networks:
  rooster-network:
    driver: bridge
    name: rooster-network

# Optional: Volumes for data persistence
# volumes:
#   redis_data:
#     driver: local