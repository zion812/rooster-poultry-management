name: Android CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 31
          target: default
          components: build-tools;31.0.0,platform-tools,emulator,system-images;android-31;google_apis;x86_64

      - name: Start emulator
        run: |
          echo "no" | avdmanager create avd -n ci-emulator -k "system-images;android-31;google_apis;x86_64" --force
          sdkmanager --install "platform-tools"
          nohup $ANDROID_SDK_ROOT/emulator/emulator -avd ci-emulator -no-window -no-audio -gpu swiftshader_indirect >/dev/null 2>&1 &
          adb wait-for-device
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0

      - name: Run tests & build
        run: ./gradlew assembleDebug testDebugUnitTest connectedDebugAndroidTest --no-daemon

      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: app/build/test-results/testDebugUnitTest/

      - name: Upload instrumentation APK
        uses: actions/upload-artifact@v3
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Generate Jacoco coverage report
        run: ./gradlew jacocoTestReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: android
